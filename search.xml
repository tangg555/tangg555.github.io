<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NodeJS+Hexo快速搭建博客(Matery主题)详细教程(含github代码)</title>
      <link href="/2020/05/23/nodejs-hexo-kuai-su-da-jian-ge-ren-bo-ke-xiang-xi-jiao-cheng/"/>
      <url>/2020/05/23/nodejs-hexo-kuai-su-da-jian-ge-ren-bo-ke-xiang-xi-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/%E9%A6%96%E9%A1%B51.png" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本人为纯前端小白,以前抱着玩玩的心态用Python+Django搭建过小Demo。近日心血来潮准备建个博客，但是不太想花过多时间（懒）。随便在网上翻了一下发现可以利用Github Pages（github为代码托管平台，Github Pages为其出的一项服务可以通过静态文件和静态站点生成器Jekyll来实现博客网站，不仅可以白嫖域名和服务器，并且此服务完全免费！:-)）。</p><p>于是我开始Google搜索Github Pages相关资源，最后发现了NodeJS+Hexo这个大宝藏，在学习和实现功能的过程中一共花了我3天时间，因为在学习过程中收益于诸多大佬的教程和代码，因此我决定将我搭建的过程和遇到的坑记录下来供大家分享。</p><p>文中我会列出我所参考的原文链接和资料供大家进一步学习。</p><p>搭建完成后的效果可以参考我的博客: <a href="https://tangg555.github.io/">https://tangg555.github.io/</a></p><h2 id="Github源代码仓库"><a href="#Github源代码仓库" class="headerlink" title="Github源代码仓库"></a>Github源代码仓库</h2><p><a href="https://github.com/tangg555/Blog-Hexo-Matery-theme" target="_blank" rel="noopener">https://github.com/tangg555/Blog-Hexo-Matery-theme</a></p><p>如果你已经会NodeJS+Hexo的基本操作，那么你可以直接从我的仓库<code>download</code>代码到本地，或者运行<code>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:tangg555/Blog-Hexo-Matery-theme.git</code>（如果安装了Git）将所有文件下载到本地。</p><p>解压文件之后，在Blog-Hexo-Matery-theme的根目录下右键菜单点击<git bash here>弹出命令框，或者<code>Win+R</code>打开命令提示符（CMD）,<code>cd</code>到Blog-Hexo-Matery-theme的根目录下。在命令框中输入如下命令进行测试：</git></p><pre class="line-numbers language-Code"><code class="language-Code">hexo g  # 生成博客网页文件hexo s  # 本地预览博客，在浏览器中打开https://localhost:4000/进行查看hexo d  # 上传网页文件到github，使用这个命令可以直接把代码部署到Git Pages中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里可以参考<a href="https://lellansin.wordpress.com/2012/12/15/cmd%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%80-%E6%89%AB%E7%9B%B2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">CMD的基础扫盲教程</a>或者<a href="https://www.runoob.com/git/git-basic-operations.html" target="_blank" rel="noopener">Git基本操作</a>。 到此为止博客就搭建完成了。如果你想要修改博客中的信息，你需要修改根目录下的_config.yml文件以及主题目录下的_config.yml文件</p><ul><li>根目录配置文件_config.yml和主题目录配置文件_config.yml中修改个人信息。</li><li>根目录配置文件中修改deploy一栏的repository。</li><li>根目录配置文件中修改baidu_url_submit一栏的token。</li><li>主题配置文件中修改gitalk一栏，修改方法见正文。</li></ul><p>如果你对如何编写代码或者个性化设计自己的博客感兴趣，那么请继续往下看。</p><h2 id="详细教程"><a href="#详细教程" class="headerlink" title="详细教程"></a>详细教程</h2><h3 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><p>环境搭建的部分表述我直接引用<a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">韦阳的博客 https://godweiyang.com/2018/04/13/hexo-blog/</a>的部分表述，避免重复造轮子。</p><h4 id="1-1-安装NodeJS"><a href="#1-1-安装NodeJS" class="headerlink" title="1.1. 安装NodeJS"></a>1.1. 安装NodeJS</h4><p>Node 是一个让 JavaScript 运行在服务端的开发平台。NodeJS的安装很简单，一路next就可以，网上的教程也很多，这里举个例子：<br><a href="https://www.jianshu.com/p/03a76b2e7e00" target="_blank" rel="noopener">Node.js安装及环境配置之Windows篇 https://www.jianshu.com/p/03a76b2e7e00</a>。</p><p>需要注意的是nodeJS有两种版本，一个是长期支持版，还有一个是最新版，这里建议下载长期支持版，因为最新版可能不支持部分package导致程序出现莫名其妙的错误。比如在2020.5.20我使用的NodeJS v14.3.0不支持hexo-cli 3.9.0导致博客运行出错，后面换成LTS v12.16.3就好了。<br><img src="/images/nodeJS1.png" alt></p><p>最后安装好之后，按Win+R打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><p>这里的npm是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题。在这份教程里npm只需要最低程度的了解就行，可以参考<a href="https://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="noopener">NPM使用介绍</a>。</p><p>因为后续使用需要安装包，所以最好准备国内的镜像原以加速下载，这里我们使用nrm包。nrm使用教程可以参考：[使用nrm快速切换npm源]（<a href="https://www.jianshu.com/p/171ec231ced4）。" target="_blank" rel="noopener">https://www.jianshu.com/p/171ec231ced4）。</a></p><p>先运行<code>npm install -g nrm</code>再运行<code>nrm use taobao</code>，这样我们的镜像原就换成淘宝的了。<br><img src="/images/nrm1.png" alt></p><h4 id="1-2-安装Git"><a href="#1-2-安装Git" class="headerlink" title="1.2. 安装Git"></a>1.2. 安装Git</h4><p>为了把本地的文件上传到github上面去，我们需要用到分布式版本控制工具————Git<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">下载地址</a>。</p><p>安装选项全部默认，只不过最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开Git了。</p><p>安装完成后在命令提示符中输入<code>git --version</code>验证是否安装成功。</p><h4 id="1-3-注册Github账号并创建Git-Pages仓库"><a href="#1-3-注册Github账号并创建Git-Pages仓库" class="headerlink" title="1.3. 注册Github账号并创建Git Pages仓库"></a>1.3. 注册Github账号并创建Git Pages仓库</h4><p>GitHub是通过Git进行版本控制的软件源代码托管服务平台，要成为一名合格的程序员（媛），Github是必备知识之一_(:з)∠)_。</p><p><a href="https://jingyan.baidu.com/article/4e5b3e192200e291911e2468.html" target="_blank" rel="noopener">Github注册可参考此处</a>。</p><p>注册完毕后我们打开<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>，新建一个项目，如下所示：</p><p><img src="/images/Github%E6%93%8D%E4%BD%9C1.png" alt></p><p>然后如下图所示，输入自己的项目名字，后面一定要加.github.io后缀，README初始化也要勾上。名称一定要和你的github名字完全一样，比如你github名字叫abc，那么仓库名字一定要是abc.github.io，这样你的博客的网址就会是<a href="https://abc.github.io。如果名字不一样的话其实也可以创建，但是创建出来的博客网址会附带https://github.com/xxx/的前缀，并且hexo部署后显示有可能不正常。" target="_blank" rel="noopener">https://abc.github.io。如果名字不一样的话其实也可以创建，但是创建出来的博客网址会附带https://github.com/xxx/的前缀，并且hexo部署后显示有可能不正常。</a></p><p><img src="/images/Github%E6%93%8D%E4%BD%9C2.png" alt></p><p>我已经创建过了这个仓库所以这里报了重名的错误。</p><p>项目建成后，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击Choose a theme选择一个主题。然后等一会儿，再回到GitHub Pages，会变成下面这样：</p><p><img src="/images/Github%E6%93%8D%E4%BD%9C3.png" alt></p><p>点击那个链接，就会出现自己的网页啦。</p><h4 id="1-4-安装Hexo"><a href="#1-4-安装Hexo" class="headerlink" title="1.4. 安装Hexo"></a>1.4. 安装Hexo</h4><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如可以放在D:\study\program\blog目录下。</p><p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p><p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo。有可能有几个报错，无视它就行。</p><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/，就可以看到我们的博客啦" target="_blank" rel="noopener">http://localhost:4000/，就可以看到我们的博客啦</a>.</p><h4 id="1-5-连接Github与本地"><a href="#1-5-连接Github与本地" class="headerlink" title="1.5. 连接Github与本地"></a>1.5. 连接Github与本地</h4><p>这里以我的Github账号为例，首先右键打开git bash，然后输入下面命令：</p><pre class="line-numbers language-Bash"><code class="language-Bash">git config --global user.name "tangg555"git config --global user.email "463127899@qq.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用户名和邮箱根据你注册github的信息自行修改。</p><p>然后生成密钥SSH key：</p><pre><code>ssh-keygen -t rsa -C &quot;463127899@qq.com&quot;</code></pre><p>打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便。</p><p>git bash中输入</p><pre><code>cat ~/.ssh/id_rsa.pub</code></pre><p>将输出的内容复制到框中，点击确定保存。</p><p>输入<code>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></code>，如果如下图所示，出现你的用户名，那就成功了</p><p><img src="/images/Github%E6%93%8D%E4%BD%9C4.png" alt></p><p>注意，创建ssh key期间如果要输入什么东西的话，直接回车就行，其中password phrase是密码，每次上传时都需要输入。</p><p>打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p><p>修改<code>deploy</code>的配置：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repository:    github: git@github.com:tangg555/tangg555.github.io.git  branch: master</code></pre><p>到这里为止，所有必须的环境就全部搭建完了</p><h3 id="二、Hexo源代码介绍"><a href="#二、Hexo源代码介绍" class="headerlink" title="二、Hexo源代码介绍"></a>二、Hexo源代码介绍</h3><p>这里以我的博客代码为例<a href="https://github.com/tangg555/Blog-Hexo-Matery-theme" target="_blank" rel="noopener">https://github.com/tangg555/Blog-Hexo-Matery-theme</a></p><h4 id="2-1-根目录"><a href="#2-1-根目录" class="headerlink" title="2.1.根目录/"></a>2.1.根目录/</h4><p>下图为根目录文件结构：</p><p><img src="/images/Hexo%E4%BB%8B%E7%BB%8D1.png" alt></p><p>其中：</p><ul><li><code>.deploy_git</code>为运行<code>hexo d</code>命令后生成的文件目录；</li><li><code>node_modules</code>是npm安装包的存放目录；</li><li><code>public</code>是运行<code>hexo g</code>命令生成的静态文件，包含css, js, html等用于渲染的文件以及markdown格式的post等数据文件。<b>注意!</b>,这个文件夹里的东西是自动生成的，是用来给Git Pages部署的，因此不用人为修改里面的东西。（比如增加图片之类的，因为一运行hexo g命令就会自动重载）</li><li><code>scaffolds</code>存放<code>draft.md</code>, <code>page.md</code>, <code>post.md</code>三个样式文件，点进去看一下就知道怎么回事了</li><li><code>source</code>存放的大多是数据，比如markdown格式的post文件，或者你要用到的图片等文件。</li><li><code>themes</code>目录存放主题，我所使用的主题为matery，点开里面又是一番新天地……</li><li><code>_config.yml</code>是总的配置文件，这个非常重要！主题里面也有一个_config.yml，主要用来控制博客的外观。</li><li><code>db.json</code>这个不用管</li><li><code>LICENSE</code>这个是协议，只要你copy的代码里面有这个，你的代码公布出去就必须包含这个文件。</li><li><code>package.json</code>和<code>package-lock.json</code>是使用npm安装包时生成的文件，你可以在里面看到所安装包的版本情况。</li></ul><h4 id="2-2-主题目录-themes-matery"><a href="#2-2-主题目录-themes-matery" class="headerlink" title="2.2.主题目录/themes/matery"></a>2.2.主题目录/themes/matery</h4><p>下图为主题目录文件结构：</p><p><img src="/images/Hexo%E4%BB%8B%E7%BB%8D2.png" alt><br>其中：</p><ul><li><code>languages</code>应该是做映射用的，因为有些地方对变量取名有要求，有些变量名中不能有空格(比如url)，所以这里做了一些映射：<code>recommendedPosts: Recommended Posts</code>，还有些是单复数转换如：<code>posts: Posts</code>；</li><li><code>layout</code>存放的是ejs文件，主要用来生成public文件夹中的html文件，作用是渲染页面，有兴趣的可以查一下NodeJS的express和ejs；</li><li><code>source</code>存放图片等资源，这里的资源一般与页面有关。</li><li><code>_config.yml</code>非常重要！主要用来控制博客的外观。</li></ul><h3 id="三、部分功能介绍"><a href="#三、部分功能介绍" class="headerlink" title="三、部分功能介绍"></a>三、部分功能介绍</h3><p>这一部分有非常多的插件安装以及代码编写，所以建议直接选择下载Github上已有的博客进行修改。比如我的hexo博客代码来自<a href="https://github.com/godweiyang/hexo-matery-modified" target="_blank" rel="noopener">韦阳的博客 https://github.com/godweiyang/hexo-matery-modified</a>。但是我的主题代码来自<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">blinkfox的博客 https://github.com/blinkfox/hexo-theme-matery</a>。然后在这两者的基础上进行扩充、修改、完善。</p><h4 id="1-更换主题"><a href="#1-更换主题" class="headerlink" title="1. 更换主题"></a>1. 更换主题</h4><p>那么首先我们从最大的开始说起，直接影响博客布局和外观的是主题。Hexo的主题有非常多种，具体可以参考知乎上的回答：<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">有哪些好看的Hexo主题?</a>。<br>在博客刚搭建好的时候主题为landscape，文件在根目录下的themes文件夹中,路径为/themes/landscape。</p><p><img src="/images/%E4%B8%BB%E9%A2%981.png" alt></p><center>初始的landscape主题</center><p>如果你需要更换主题你需要做两件事：</p><ul><li>下载主题文件如<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">blinkfox的博客 https://github.com/blinkfox/hexo-theme-matery</a>到/themes/l路径下</li><li>修改根目录<code>_config.yml</code>文件，将theme设置为你下载的主题<pre class="line-numbers language-txt"><code class="language-txt"># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: matery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-写文章、发布文章"><a href="#2-写文章、发布文章" class="headerlink" title="2.写文章、发布文章"></a>2.写文章、发布文章</h4><p>首先在博客根目录下右键打开<code>git bash</code>，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><p>然后输入<code>hexo new post "article title"</code>，新建一篇文章。</p><p>然后打开\source_posts的目录，可以发现下面多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>编写完markdown文件后，根目录下输入hexo g生成静态网页，然后输入hexo s可以本地预览效果，最后输入hexo d上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p><p>但是正常在.md文件里面直接写的话看不到实际效果，不太方便，hexo有一个admin插件，可以实现markdown文件的在线编辑预览。</p><p>具体可以参考<a href="https://albenw.github.io/posts/4ffa5bc6/" target="_blank" rel="noopener">hexo-admin教程</a>。用<code>npm install --save hexo-admin</code>安装好后，运行<code>hexo s</code>然后打开<a href="http://localhost:4000/admin/" target="_blank" rel="noopener">http://localhost:4000/admin/</a>就可以编辑了。</p><p><b>注意！</b> 经过实际测试这个插件安装后，我的博客有部分功能会出bug，不建议安装在我的博客源码中。建议另外开一个hexo工程来写文章。</p><h4 id="3-添加看板娘"><a href="#3-添加看板娘" class="headerlink" title="3.添加看板娘"></a>3.添加看板娘</h4><p>身为一名<del>死宅</del>二次元爱好者，给博客添加一位看板娘很符合我的口味，咳咳……正常地添加看板娘可以参考网上的教程如：<a href="https://www.jianshu.com/p/7795779f8f8d" target="_blank" rel="noopener">hexo 添加和取消live2d看板动画</a></p><p>查看模型：<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">https://github.com/xiazeyu/live2d-widget-models</a></p><p>截图预览：<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">https://huaji8.top/post/live2d-plugin-2.0/</a></p><p>简单来说步骤是这样：</p><ul><li><code>npm install --save hexo-helper-live2d</code></li><li><code>npm install 看板娘的模型名称</code></li><li>配置站点_config.yml文件</li></ul><p>但是我偏向于使用<a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">张书樵大神的项目 https://github.com/stevenjoezhang/live2d-widget</a></p><p>具体添加方法项目的readme中写的很清楚了。值得一提的是，我使用cdn来配置的时候，人物总是刷新不出来，最后我只能把代码download下来然后直接把js插入到head.ejs中，问题解决。有兴趣的可以自己研究下，以下是效果图：<br><img src="/images/%E7%9C%8B%E6%9D%BF%E5%A8%98.png" alt></p><center>药水制作师的pio酱</center><h4 id="4-首页音乐播放器"><a href="#4-首页音乐播放器" class="headerlink" title="4.首页音乐播放器"></a>4.首页音乐播放器</h4><p>这个没啥好说的，我用的matery主题里面自带的，改主题中_config.yml文件的配置就行：</p><pre class="line-numbers language-txt"><code class="language-txt"># Whether to display the musics.# 是否在首页显示音乐.music:  enable: true  title: #非吸底模式有效    enable: true    show: 听听音乐  autoHide: true    # hide automaticaly  server: netease   #require    music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 563114426     #require    song id / playlist id / album id / search keyword  fixed: true       # 开启吸底模式  autoplay: true   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false  # 列表默认折叠  hideLrc: false     # 隐藏歌词<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-雪花特效"><a href="#4-雪花特效" class="headerlink" title="4.雪花特效"></a>4.雪花特效</h4><p>我的博客中有两种雪花特效，一种是参考<a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">韦阳的博客 https://godweiyang.com/2018/04/13/hexo-blog/</a>，具体细节我就不列出了，另一种的添加过程如下所示：</p><p>首先在主题的source/css/目录中创建snow.css文件，写入如下代码：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> snow-curtain</span> <span class="token punctuation">{</span>    <span class="token selector">0% </span><span class="token punctuation">{</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">50% </span><span class="token punctuation">{</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1080</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">100% </span><span class="token punctuation">{</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> snow-curtain</span> <span class="token punctuation">{</span>    <span class="token selector">0% </span><span class="token punctuation">{</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">50% </span><span class="token punctuation">{</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1080</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">100% </span><span class="token punctuation">{</span>        <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-moz-keyframes</span> snow-curtain</span> <span class="token punctuation">{</span>    <span class="token selector">0% </span><span class="token punctuation">{</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">50% </span><span class="token punctuation">{</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1080</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">100% </span><span class="token punctuation">{</span>        <span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-ms-keyframes</span> snow-curtain</span> <span class="token punctuation">{</span>    <span class="token selector">0% </span><span class="token punctuation">{</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">50% </span><span class="token punctuation">{</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1080</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">100% </span><span class="token punctuation">{</span>        <span class="token property">-ms-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-o-keyframes</span> snow-curtain</span> <span class="token punctuation">{</span>    <span class="token selector">0% </span><span class="token punctuation">{</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">50% </span><span class="token punctuation">{</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1080</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">100% </span><span class="token punctuation">{</span>        <span class="token property">-o-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.snow-roll</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> snow-curtain <span class="token number">5</span>s<span class="token punctuation">;</span>    <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> snow-curtain <span class="token number">5</span>s<span class="token punctuation">;</span>    <span class="token property">-moz-animation</span><span class="token punctuation">:</span> snow-curtain <span class="token number">5</span>s<span class="token punctuation">;</span>    <span class="token property">-ms-animation</span><span class="token punctuation">:</span> snow-curtain <span class="token number">5</span>s<span class="token punctuation">;</span>    <span class="token property">-o-animation</span><span class="token punctuation">:</span> snow-curtain <span class="token number">5</span>s<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.snow-div</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在主题的source/js/目录中创建snow.js文件，写入如下代码</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">snow</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> height<span class="token punctuation">,</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>        img<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"snow-roll"</span><span class="token punctuation">;</span>        img<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>        div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> height <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>        div<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"snow-div "</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"snowzone"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"snowzone"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// console.log(window.innerHeight); </span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> left <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span>        <span class="token keyword">var</span> height <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>        <span class="token keyword">var</span> src <span class="token operator">=</span> <span class="token string">"/medias/js/s"</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".png"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//两张图片分别为"s1.png"、"s2.png" </span>        <span class="token function">snow</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> height<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>雪花的图片在主题目录的source/medias/js目录下。</p><p>接着在主题的layout/_partial/head.ejs文件中找地方插入下列代码即可。</p><pre class="line-numbers language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/snow.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>snowzone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/snow.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-天气插件"><a href="#5-天气插件" class="headerlink" title="5.天气插件"></a>5.天气插件</h4><p>这个主要是利用中国天气网提供的官方api生成代码即可，可以网上自行查找教程如：<a href="https://www.cnblogs.com/chsoul/p/10650113.html" target="_blank" rel="noopener">https://www.cnblogs.com/chsoul/p/10650113.html</a></p><p>中国天气网:<a href="https://cj.weather.com.cn/plugin/pc" target="_blank" rel="noopener">https://cj.weather.com.cn/plugin/pc</a></p><p>我将代码插在主题目录下的layout/layout.ejs文件中</p><h4 id="6-相册设置"><a href="#6-相册设置" class="headerlink" title="6.相册设置"></a>6.相册设置</h4><p>这里的思路和代码主要来源于这篇博文：<a href="https://liyangzone.com/2019/07/22/hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E4%B8%80%E7%BA%A7%E5%88%86%E7%B1%BB%E7%9B%B8%E5%86%8C/" target="_blank" rel="noopener">hexo博客添加一级分类相册功能 </a></p><p>但程序和实现有些不同，大致的流程请参考上面这篇博文，但这样的设计在我移植完后有两个问题，一个是对gallery的渲染和描述有点缺失，还有一个问题是gallery的名字与索引的url相同，当我使用中文作为gallery的名称时，页面索引会报错。（这个我没有深入的找原因，大概是hexo产生静态页面的时候字符集不对，不是utf-8）。 所以我修改了两个地方：</p><ul><li>在主题页面source/css/gallery.css文件中更改和加入了样式：</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.gallery-item</span> <span class="token class">.gallery-name</span></span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> STKaiti,  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">26</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#666</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">text-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">20</span>px <span class="token hexcode">#fdec84</span>,    <span class="token number">10</span>px -<span class="token number">10</span>px <span class="token number">30</span>px <span class="token hexcode">#ffae35</span>,    <span class="token number">20</span>px -<span class="token number">20</span>px <span class="token number">40</span>px <span class="token hexcode">#ec760c</span>,    -<span class="token number">20</span>px -<span class="token number">60</span>px <span class="token number">50</span>px <span class="token hexcode">#cd4607</span>,    <span class="token number">0</span>px -<span class="token number">80</span>px <span class="token number">60</span>px <span class="token hexcode">#973717</span>,    <span class="token number">10</span>px -<span class="token number">40</span>px <span class="token number">70</span>px <span class="token hexcode">#451b0e</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.gallery-desc</span></span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> STKaiti,  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">24</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFA07A</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改主题目录下的layout/galleries.ejs文件为：</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"/css/gallery.css"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/bg-cover'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>site<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> site<span class="token punctuation">.</span>data<span class="token punctuation">.</span>galleries<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">var</span> galleries <span class="token operator">=</span> site<span class="token punctuation">.</span>data<span class="token punctuation">.</span>galleries<span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"gallery-wrapper row"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> galleries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">var</span> gallery <span class="token operator">=</span> galleries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col s6 m4 l4 xl3 gallery-box"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"./&lt;%- gallery.name %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"gallery-item"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"zoom-in-up"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"gallery-cover-box"</span> style<span class="token operator">=</span><span class="token string">"background-image: url(&lt;%- gallery.cover%>);"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"gallery-name"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> gallery<span class="token punctuation">.</span>show_name <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                    <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"gallery-desc"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> gallery<span class="token punctuation">.</span>description <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在根目录下source/_data/galleries.json文件的格式为：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> 相册名字（必须为英文，用来产生url）<span class="token punctuation">,</span>        <span class="token property">"show_name"</span><span class="token operator">:</span> 在页面上显示的相册名字<span class="token punctuation">,</span>        <span class="token property">"cover"</span><span class="token operator">:</span> 封面url<span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> 对于相册的描述<span class="token punctuation">,</span>        <span class="token property">"photos"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"IMG_4842(20200216-235146).JPG"</span><span class="token punctuation">,</span>            <span class="token string">"IMG_8370(20200221-172506).JPG"</span><span class="token punctuation">,</span>            <span class="token string">"IMG_8371(20200221-172605).JPG"</span><span class="token punctuation">,</span>            <span class="token string">"IMG_9097(20181017-212109).JPG"</span><span class="token punctuation">,</span>            <span class="token string">"IMG_9194(20190522-014745).JPG"</span><span class="token punctuation">,</span>            <span class="token string">"IMG_9195(20190521-164702).JPG"</span><span class="token punctuation">,</span>            <span class="token string">"mmexport1572353752240.jpg"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    ...<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了更加快速地产生source/_data/galleries.json文件，可以在根目录下的source/galleries/目录创建python脚本make_gallery_json.py。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>gallry_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span>gallry_dir<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># photos</span>    _files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>gallry_dir<span class="token punctuation">)</span>    photos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> one <span class="token keyword">in</span> _files<span class="token punctuation">:</span>        <span class="token keyword">if</span> one<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'.jpg'</span><span class="token punctuation">:</span>            photos<span class="token punctuation">.</span>append<span class="token punctuation">(</span>one<span class="token punctuation">)</span>    content<span class="token punctuation">[</span><span class="token string">"cover"</span><span class="token punctuation">]</span> <span class="token operator">=</span> gallry_dir<span class="token operator">+</span>photos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    content<span class="token punctuation">[</span><span class="token string">"description"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span>    content<span class="token punctuation">[</span><span class="token string">"photos"</span><span class="token punctuation">]</span> <span class="token operator">=</span> photos    <span class="token keyword">return</span> content<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    dirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> one <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>one<span class="token punctuation">)</span> <span class="token operator">and</span> one<span class="token operator">!=</span><span class="token string">'.idea'</span><span class="token punctuation">:</span>            dirs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>one<span class="token operator">+</span><span class="token string">'/'</span><span class="token punctuation">)</span>    _list <span class="token operator">=</span> <span class="token punctuation">[</span>get_content<span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token keyword">for</span> dir <span class="token keyword">in</span> dirs<span class="token punctuation">]</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"galleries.json"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fw<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>_list<span class="token punctuation">,</span> fw<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>产生的source/_data/galleries.json文件稍作修改即可。</p><p>相册最后的实现效果如下：</p><p><img src="/images/%E7%9B%B8%E5%86%8C.png" alt></p><h4 id="7-设置gitalk"><a href="#7-设置gitalk" class="headerlink" title="7.设置gitalk"></a>7.设置gitalk</h4><p>主题已经自带了gitalk插件了，所以你只需要去github官网配置好就行了。</p><p>首先打开github申请一个应用（<a href>https://github.com/settings/applications/new</a>），要填四个东西：</p><pre class="line-numbers language-txt"><code class="language-txt">Application name //应用名称，随便填Homepage URL //填自己的博客地址Application description //应用描述，随便填Authorization callback URL //填自己的博客地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后点击注册，会出现两个字符串Client ID和Client Secret，这个要复制出来。</p><p>然后去主题的配置文件_config.yml下修改gitalk那里：</p><pre class="line-numbers language-txt"><code class="language-txt">gitalk:  enable: true  owner: 你的github用户名  repo: 你的github用户名.github.io  oauth:    clientId: 粘贴刚刚注册完显示的字符串    clientSecret: 粘贴刚刚注册完显示的字符串  admin: 你的github用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以后写文章的时候，只要在文章页面登陆过github，就会自动创建评论框，记得每次写完文章后打开博客文章页面一下。</p><p><img src="/images/%E7%95%99%E8%A8%80.png" alt></p><h4 id="8-图片添加水印"><a href="#8-图片添加水印" class="headerlink" title="8.图片添加水印"></a>8.图片添加水印</h4><p>这里使用了<a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">韦阳的博客 https://godweiyang.com/2018/04/13/hexo-blog/</a>的程序</p><p>为了防止别人抄袭你文章，可以把所有的图片都加上水印，方法很简单。</p><p>首先在博客根目录下新建一个watermark.py，代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> glob<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDraw<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageFont<span class="token keyword">def</span> <span class="token function">watermark</span><span class="token punctuation">(</span>post_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> post_name <span class="token operator">==</span> <span class="token string">'all'</span><span class="token punctuation">:</span>        post_name <span class="token operator">=</span> <span class="token string">'*'</span>    dir_name <span class="token operator">=</span> <span class="token string">'source/_posts/'</span> <span class="token operator">+</span> post_name <span class="token operator">+</span> <span class="token string">'/*'</span>    <span class="token keyword">for</span> files <span class="token keyword">in</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>files<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>im<span class="token punctuation">.</span>getbands<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            im <span class="token operator">=</span> im<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>        font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'STSONG.TTF'</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>        draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  u<span class="token string">'@yourname'</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">)</span>        im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        watermark<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[usage] &lt;input>'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字体也放根目录下，自己找字体。然后每次写完一篇文章可以运行<code>python3 watermark.py postname</code>添加水印，如果第一次运行要给所有文章添加水印，可以运行<code>python3 watermark.py all<code>。</code></code></p><h4 id="9-CSDN博客迁移"><a href="#9-CSDN博客迁移" class="headerlink" title="9.CSDN博客迁移"></a>9.CSDN博客迁移</h4><p>这个可以使用大佬的工具<a href="https://github.com/flytam/CsdnSyncHexo" target="_blank" rel="noopener">https://github.com/flytam/CsdnSyncHexo</a>。</p><p>大佬代码好，回复快，这里推荐一波。</p><h4 id="10-功能的开启与关闭以及其他的一些功能"><a href="#10-功能的开启与关闭以及其他的一些功能" class="headerlink" title="10.功能的开启与关闭以及其他的一些功能"></a>10.功能的开启与关闭以及其他的一些功能</h4><p>这些都可以在根目录和主题目录的两个config.yml文件中进行配置，有兴趣的话可以仔细研究一下。</p><h2 id="博客截图"><a href="#博客截图" class="headerlink" title="博客截图"></a>博客截图</h2><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p><img src="/images/%E9%A6%96%E9%A1%B51.png" alt><br><img src="/images/%E9%A6%96%E9%A1%B52.png" alt><br><img src="/images/%E9%A6%96%E9%A1%B53.png" alt></p><h3 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h3><p><img src="/images/%E7%95%99%E8%A8%80.png" alt></p><h3 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h3><p><img src="/images/%E7%9B%B8%E5%86%8C.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> NodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra算法的简单python实现（附代码）</title>
      <link href="/2020/05/19/2019-03-21-dijkstra-algorithms/"/>
      <url>/2020/05/19/2019-03-21-dijkstra-algorithms/</url>
      
        <content type="html"><![CDATA[<h2 id="Dijkstra算法介绍："><a href="#Dijkstra算法介绍：" class="headerlink" title="Dijkstra算法介绍："></a>Dijkstra算法介绍：</h2><p><a href="http://wiki.jikexueyuan.com/project/easy-learn-algorithm/dijkstra.html" target="_blank" rel="noopener">http://wiki.jikexueyuan.com/project/easy-learn-algorithm/dijkstra.html</a></p><p>按照Dijkstra算法的思路用python实现了一下，用邻接矩阵表示点与点之间边的权重。刚接触Dijkstra算法，网上python实现的程序太过复杂因此没看，如果程序有错误欢迎指出。</p><p>以下图为例：<br><img src="https://img-blog.csdnimg.cn/20190321140749217.png" alt></p><p>他的邻接矩阵如下：<br><img src="https://img-blog.csdnimg.cn/20190321141010935.png" alt></p><p>=&gt;</p><pre class="line-numbers language-Python"><code class="language-Python">Inf = float('inf')Adjacent = [[0, 1, 12, Inf, Inf, Inf],             [Inf, 0, 9, 3, Inf, Inf],             [Inf, Inf, 0, Inf, 5, Inf],             [Inf, Inf, 4, 0, 13, 15],             [Inf, Inf, Inf, Inf, 0, 4],             [Inf, Inf, Inf, Inf, Inf, 0]]Src, Dst, N = 0, 5, 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> Src表示起点的编号，Dst表示终点的编号，N表示结点个数.</p><p> Dijkstra算法实现:</p><pre class="line-numbers language-Python"><code class="language-Python">def dijstra(adj, src, dst, n):    dist = [Inf] * n    dist[src] = 0    book = [0] * n # 记录已经确定的顶点    # 每次找到起点到该点的最短途径    u = src    for _ in range(n-1):    # 找n-1次        book[u] = 1 # 已经确定        # 更新距离并记录最小距离的结点        next_u, minVal = None, float('inf')        for v in range(n):    # w            w = adj[u][v]            if w == Inf:    # 结点u和v之间没有边                continue            if not book[v] and dist[u] + w < dist[v]: # 判断结点是否已经确定了，                dist[v] = dist[u] + w                if dist[v] < minVal:                    next_u, minVal = v, dist[v]        # 开始下一轮遍历        u = next_u    print(dist)    return dist[dst]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dist为起点-&gt;每个结点的距离的列表。（所以起点要赋值为0:dist[src] = 0），而 book的作用是记录已经确定了最短距离的结点的列表。整体程序如下：</p><pre class="line-numbers language-Python"><code class="language-Python">​Inf = float('inf')Adjacent = [[0, 1, 12, Inf, Inf, Inf],            [Inf, 0, 9, 3, Inf, Inf],            [Inf, Inf, 0, Inf, 5, Inf],            [Inf, Inf, 4, 0, 13, 15],            [Inf, Inf, Inf, Inf, 0, 4],            [Inf, Inf, Inf, Inf, Inf, 0]]Src, Dst, N = 0, 5, 6def dijstra(adj, src, dst, n):    dist = [Inf] * n    dist[src] = 0    book = [0] * n # 记录已经确定的顶点    # 每次找到起点到该点的最短途径    u = src    for _ in range(n-1):    # 找n-1次        book[u] = 1 # 已经确定        # 更新距离并记录最小距离的结点        next_u, minVal = None, float('inf')        for v in range(n):    # w            w = adj[u][v]            if w == Inf:    # 结点u和v之间没有边                continue            if not book[v] and dist[u] + w < dist[v]: # 判断结点是否已经确定了，                dist[v] = dist[u] + w                if dist[v] < minVal:                    next_u, minVal = v, dist[v]        # 开始下一轮遍历        u = next_u    print(dist)    return dist[dst]dijstra(Adjacent, Src, Dst, N)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为：[0, 1, 8, 4, 13, 17]</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Dijkstra </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker在镜像中运行宿主机程序</title>
      <link href="/2019/07/05/2019-07-05-shi-yong-docker-zai-jing-xiang-zhong-yun-xing-su-zhu-ji-cheng-xu-zhuan-zai/"/>
      <url>/2019/07/05/2019-07-05-shi-yong-docker-zai-jing-xiang-zhong-yun-xing-su-zhu-ji-cheng-xu-zhuan-zai/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>转载自：</strong></p><p>易百教程 <a href="https://www.yiibai.com/docker/run.html" target="_blank" rel="noopener">https://www.yiibai.com/docker/run.html</a></p><p><code>docker run</code>命令用于在新容器中运行命令。<code>docker run</code>命令首先在指定的映像上创建一个可写容器层，然后使用指定的命令启动它。 也就是说，<code>docker run</code>相当于API <code>/containers/create</code> 和 <code>/containers/(id)/start</code>。 可以使用<code>docker start</code>重新启动停止的容器，并使用其所有先前的更改完整。 请参阅<code>docker ps -a</code>查看所有容器的列表。</p><p><strong>用法</strong></p><pre class="Shell"><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></pre><h2 id="h2-u4F8Bu5B50"><a name="例子"></a>例子</h2><p><strong>分配名称并分配伪TTY(<code>-name</code>，<code>-it</code>)</strong></p><pre class="Shell"><code>$ docker run --name test -it debianroot@d6c0fe130dba:/# exit 13$ echo $?13$ docker ps -a | grep testd6c0fe130dba        debian:7            "/bin/bash"         26 seconds ago      Exited (13) 17 seconds ago                         test</code></pre><p>此示例使用<code>debian:latest</code>映像运行一个名为<code>test</code>的容器。 <code>-it</code> 指示Docker分配连接到容器的stdin的伪TTY; 在容器中创建一个交互式的bash shell。 在该示例中，bash shell通过输入<code>exit 13</code>退出。该退出代码传递给<code>docker run</code>的调用者，并记录在测试容器的元数据中。</p><p><strong>捕获容器ID(-cidfile)</strong></p><pre class="Shell"><code>$ docker run --cidfile /tmp/docker_test.cid ubuntu echo "test"</code></pre><p>这将创建一个容器并打印测试到控制台。<code>--cidfile</code>标志使Docker尝试创建一个新文件，并将容器ID写入它。如果文件已经存在，Docker将返回一个错误。 Docker运行退出时，Docker将关闭此文件。</p><p><strong>完整的容器功能(-privileged)</strong></p><pre class="Shell"><code>$ docker run -t -i --rm ubuntu bashroot@bc338942ef20:/# mount -t tmpfs none /mntmount: permission denied</code></pre><p>这将不起作用，因为默认情况下，大多数潜在的危险内核功能被丢弃; 包括<code>cap_sys_admin</code>(这是挂载文件系统所需的)。 但是，<code>--privileged</code>标志将允许它运行：</p><pre class="Shell"><code>$ docker run -t -i --privileged ubuntu bashroot@50e3f57e16e6:/# mount -t tmpfs none /mntroot@50e3f57e16e6:/# df -hFilesystem      Size  Used Avail Use% Mounted onnone            1.9G     0  1.9G   0% /mnt</code></pre><p><strong>设置工作目录[-w]</strong></p><pre class="Shell"><code>$ docker  run -w /path/to/dir/ -i -t  ubuntu pwd</code></pre><p><code>-w</code>允许在目录中执行命令，这里是<code>/path/to/dir/</code>。 如果路径不存在，则在容器内创建。</p><p><strong>为每个容器设置存储驱动程序选项</strong></p><pre class="Shell"><code>$ docker run -it --storage-opt size=120G fedora /bin/bash</code></pre><p><strong>挂载tmpfs(-tmpfs)</strong></p><pre class="Shell"><code>$ docker run -d --tmpfs /run:rw,noexec,nosuid,size=65536k my_image</code></pre><p><code>--tmpfs</code>标志使用<code>rw</code>，<code>noexec</code>，<code>nosuid</code>，<code>size = 65536k</code>选项将一个空<code>tmpfs</code>装载到容器中。</p><p><strong>挂载卷(-v，-read-only)</strong></p><pre class="Shell"><code>$ docker  run  -v `pwd`:`pwd` -w `pwd` -i -t  ubuntu pwd</code></pre><p><code>-v</code>标志将当前工作目录装载到容器中。 <code>-w</code>允许在当前工作目录中执行命令，将目录更改为<code>pwd</code>返回的值。所以这个组合使用容器执行命令，但在当前工作目录中。</p><pre class="Shell"><code>$ docker run -v /doesnt/exist:/foo -w /foo -i -t ubuntu bash</code></pre><p>当绑定卷的主机目录不存在时，Docker将自动在主机上创建此目录。 在上面的示例中，Docker将在启动容器之前创建<code>/doesnt/exists</code>文件夹。</p><pre class="Shell"><code>$ docker run --read-only -v /icanwrite busybox touch /icanwrite/here</code></pre><p>卷可以与<code>--read-only</code>组合使用，以控制容器写入文件的位置。 <code>--read-only</code>标志将容器的根文件系统挂载为只读禁止写入容器的指定卷以外的位置。</p><p>原文出自【易百教程】，商业转载请联系作者获得授权，非商业转载请保留原文链接：https://www.yiibai.com/docker/run.html<br> </p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker镜像 </tag>
            
            <tag> 宿主机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器的创建、启动、和停止</title>
      <link href="/2019/07/05/2019-07-05-docker-rong-qi-de-chuang-jian-qi-dong-he-ting-zhi-zhuan-zai/"/>
      <url>/2019/07/05/2019-07-05-docker-rong-qi-de-chuang-jian-qi-dong-he-ting-zhi-zhuan-zai/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>1、容器是独立运行的一个或一组应用，及他们的运行环境。容器是Docker中的一个重要的概念。</p><p><strong>2、docker容器的启动有三种方式</strong><br>a.交互方式，基于镜像新建容器并启动<br>例如我们可以启动一个容器，打印出当前的日历表<br>[root@rocketmq-nameserver4 ~]# docker run my/python:v1 cal ##my/python:v1为镜像名和标签<br><img alt class="has" src="https://images2018.cnblogs.com/blog/270324/201803/270324-20180320141006656-1163681357.png"></p><p>我们还可以通过指定参数，启动一个bash交互终端。<br>[root@rocketmq-nameserver4 ~]# docker run -it my/python:v1 /bin/bash<br><img alt class="has" src="https://images2018.cnblogs.com/blog/270324/201803/270324-20180320141018576-2113140501.png"><br>参数-t让Docker分配一个伪终端并绑定在容器的标准输入上，-i让容器的标准输入保持打开。</p><p>使用docker run命令来启动容器，docker在后台运行的标准操作包括<br>1.检查本地是否存在指定的镜像，不存在则从公有仓库下载<br>2.使用镜像创建并启动容器<br>3.分配一个文件系统，并在只读的镜像层外面挂载一层可读可写层<br>4.从宿主主机配置的网桥接口中桥接一个虚拟接口道容器中去<br>5.从地址池分配一个ip地址给容器<br>6.执行用户指定的应用程序<br>7.执行完毕之后容器被终止<br><img alt class="has" src="https://images2018.cnblogs.com/blog/270324/201803/270324-20180320141029918-349771940.png"><br>my/sinatra:v2基于training/sinatra镜像进行修改后的镜像，training/sinatra为公有仓库上的镜像。</p><p>b、短暂方式，直接将一个已经终止的容器启动运行起来<br>可以使用docker start命令，直接将一个已经终止的容器启动运行起来。</p><p>[root@rocketmq-nameserver4 ~]# docker run my/python:v1 /bin/echo hello test <br>hello test<br>命令执行完，控制台会打印"hello test"，container就终止了，不过并没有消失，<br>可以用"docker ps -n 5 "看一下最新前5个的container，第一个就是刚刚执行过的container，可以再次执行一遍：docker start container_id</p><p>不过这次控制台看不到”hello test”了，只能看到ID，用logs命令才能看得到：docker logs container_id。<br>可以看到两个”hello test”了，因为这个container运行了两次。<br><img alt class="has" src="https://images2018.cnblogs.com/blog/270324/201803/270324-20180320141043102-2077108773.png"></p><p>c、daemon方式，守护态运行<br>即让软件作为长时间服务运行，这就是SAAS啊！</p><p>例如我们启动centos后台容器，每隔一秒打印当天的日历。<br>$ docker run -d centos /bin/sh -c "while true;do echo hello docker;sleep 1;done"</p><p>启动之后，我们使用docker ps -n 5查看容器的信息</p><p>要查看启动的centos容器中的输出，可以使用如下方式：<br>$ docker logs $CONTAINER_ID ##在container外面查看它的输出 <br>$ docker attach $CONTAINER_ID ##连接上容器实时查看：</p><p><strong>3、终止容器</strong><br>使用docker stop $CONTAINER_ID来终止一个运行中的容器。并且可以使用docker ps -a来看终止状态的容器。<br><img alt class="has" src="https://images2018.cnblogs.com/blog/270324/201803/270324-20180320141055377-965119728.png"></p><p>终止状态的容器，可以使用docker start来重新启动。<br><img alt class="has" src="https://images2018.cnblogs.com/blog/270324/201803/270324-20180320141106848-1725632174.png"></p><p>使用docker restart命令来重启一个容器。<br><img alt class="has" src="https://images2018.cnblogs.com/blog/270324/201803/270324-20180320141119426-840453652.png"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10+python3.6安装tensorflow-gpu1.8.0+CUDA9.0+cuDNN7.1</title>
      <link href="/2018/04/28/2018-04-28-win10-python3.6-an-zhuang-tensorflow-gpu1.8.0-cuda9.0-cudnn7.1/"/>
      <url>/2018/04/28/2018-04-28-win10-python3.6-an-zhuang-tensorflow-gpu1.8.0-cuda9.0-cudnn7.1/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><span style="font-size:18px">以下记录为我在电脑上安装的过程(2018.4.28)：</span></p><p><strong><span style="font-size:18px">版本信息：</span></strong></p><p><span style="font-size:18px">win10</span></p><p><span style="font-size:18px">python3.6.5</span></p><p><span style="font-size:18px">tensorflow-gpu1.8.0</span></p><p><span style="font-size:18px">CUDA9.0</span></p><p><span style="font-size:18px">cuDNN7.1</span></p><p><strong><span style="font-size:18px"><br></span></strong></p><p><span style="font-size:18px"><strong>说明：</strong></span></p><p><span style="font-size:18px"><strong>1.为啥要安装这几个？<br></strong></span></p><p><span style="font-size:18px">tensorflow是微软家出的一个用来做深度学习的开源库，这个库有两个版本</span></p><p><span style="font-size:18px">一种是在CPU上运行，安装方法为：pip install tensorflow</span></p><p><span style="font-size:18px">一种是在GPU上运行，安装方法为<span style="font-size:18px">pip install</span> tensorflow-gpu</span></p><p><span style="font-size:18px">注意，gpu版本的库安了后想要运行必须要按CUDA和cuDNN缺一不可:-)</span></p><p><span style="font-size:18px"><br></span></p><p><span style="font-size:18px">2.cuDNN也就几十mb而已，但CUDA可是上了gb，那么为什么还要安gpu版本的呢？</span></p><p><span style="font-size:18px">......_(:з」∠)_答案是因为跑得快</span></p><p><span style="font-size:18px">根据Tensorlayor（一个针对tensorflow库做封装的开源项目）官网上的原话：<br></span></p><p><span style="font-size:18px">在 GPU 上训练全连接神经网络比在 CPU 上训练往往要快 10~20 倍。对于卷积神经网络，往往会快 50 倍。这需要有一个 NIVIDA 的 GPU，以及安装 CUDA 和 cuDNN。</span></p><p><span style="font-size:18px"><br></span></p><p><span style="font-size:18px">3.那么什么是CUDA和cuDNN呢？</span></p><p><span style="font-size:18px">这是英伟达家出的两个软件，用来使GPU具备做深度学习计算的能力</span></p><p><span style="font-size:18px"><br></span></p><p><span style="font-size:18px"><strong>安装：</strong></span></p><p><span style="font-size:18px">首先，python3的安装直接去官网找个安装包安装就行了，但注意，就目前来说python3.6以上的版本以及所有的32位版本 还不支持tensorflow库，所以安装的时候请选择python3.6以及以下的64位版本进行安装</span></p><p><span style="font-size:18px">然后，受网上教程的指导，我直接去英伟达家下了个最新版的CUDA，结果安好tensorflow-gpu后才发现，最新的<span style="font-size:18px">tensorflow-gpu</span>1.8.0需要<span style="font-size:18px">CUDA</span>9.0，所以我建议大家先用pip install<span style="font-size:18px">tensorflow-gpu</span>安装好后，运行以下程序看看报什么错误，再安装所需的CUDA。由于我已经安装好了，我就贴下第一次运行之后应该报的正确信息：</span></p><p><span style="font-size:18px">E:\extrasoftware\Python3.6\python.exe C:/Users/tangc/Desktop/tensor/tensor_cuda_test.py<br>E:\extrasoftware\Python3.6\lib\site-packages\h5py\__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.<br>&nbsp; from ._conv import register_converters as _register_converters<br>2018-04-28 16:35:54.797458: I T:\src\github\tensorflow\tensorflow\core\platform\cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2<br>2018-04-28 16:35:55.867494: I T:\src\github\tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:1356] Found device 0 with properties:<br>name: GeForce GTX 960M major: 5 minor: 0 memoryClockRate(GHz): 1.176<br>pciBusID: 0000:01:00.0<br>totalMemory: 4.00GiB freeMemory: 3.35GiB<br>2018-04-28 16:35:55.867948: I T:\src\github\tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:1435] Adding visible gpu devices: 0<br>2018-04-28 16:38:16.395720: I T:\src\github\tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:923] Device interconnect StreamExecutor with strength 1 edge matrix:<br>2018-04-28 16:38:16.395909: I T:\src\github\tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:929]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0<br>2018-04-28 16:38:16.396099: I T:\src\github\tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:942] 0:&nbsp;&nbsp; N<br>2018-04-28 16:38:16.396584: I T:\src\github\tensorflow\tensorflow\core\common_runtime\gpu\gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3083 MB memory) -&gt; physical GPU (device: 0, name: GeForce GTX 960M, pci bus id: 0000:01:00.0, compute capability: 5.0)<br>b'hhh'<br></span></p><p><span style="font-size:18px">相应的python脚本为：</span></p><p><span style="font-size:18px"></span><pre name="code" class="python">import tensorflow as tfimport numpy as nphello=tf.constant('hhh')sess=tf.Session()print (sess.run(hello))</pre><br>如果没有安装好CUDA和cuDNN，python编辑器会告诉你应该去下载哪个版本的软件。</p><p><span style="font-size:18px"><br></span></p><p><span style="font-size:18px">然后是CUDA和cuDNN的安装<br></span></p><p><span style="font-size:18px">CUDA：<a target="_blank" href="https://developer.nvidia.com/cuda-downloads">点击打开链接</a><br></span></p><p><span style="font-size:18px">cuDNN：<a target="_blank" href="https://developer.nvidia.com/cudnn">点击打开链接</a><br></span></p><p><span style="font-size:18px">具体安装步骤篇幅太长了就不写了，网上教程很多，都没有什么大错误，</span></p><p><span style="font-size:18px">注意：</span></p><p><span style="font-size:18px">1.安装完之后需要在环境变量中添加对应的目录，不然python找不到相应文件和程序</span></p><p><span style="font-size:18px">2.CUDA成功安装后可以在命令行(cmd)中用nvcc -V查看对应信息<br></span></p><p><span style="font-size:18px">2.cuDNN下载前需要先注册</span></p><p><span style="font-size:18px"><br></span></p><p><span style="font-size:18px">接着，就可以愉快地用GPU进行深度学习了~<br></span></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> CUDA </tag>
            
            <tag> cuDNN </tag>
            
            <tag> tensorflow-gpu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fiddler软件抓包乱码问题以及https抓不到问题解决</title>
      <link href="/2018/03/29/2018-03-29-fiddler-ruan-jian-zhua-bao-luan-ma-wen-ti-yi-ji-https-zhua-bu-dao-wen-ti-jie-jue/"/>
      <url>/2018/03/29/2018-03-29-fiddler-ruan-jian-zhua-bao-luan-ma-wen-ti-yi-ji-https-zhua-bu-dao-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>环境：</strong></p><p><strong>fiddler4 <br></strong></p><p><strong>windows 10</strong></p><p>在第一次抓包的时候，我发现在Response一栏，除了Header文本正常之外，其他的文本是乱码状态：</p><p> </p><div></div><p><img src="https://img-blog.csdn.net/20180329133756360?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="647" height="259" alt></p><p>我一开始以为是编码格式的问题，但后来发现网上有说是压缩的关系，得使用decode，但按下左上角的decode按钮后没有反应，</p><p><img src="https://img-blog.csdn.net/20180329133957164?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br></p><p>Response上<br></p><p>这时候发现了黄色框的内容：</p><p><img src="https://img-blog.csdn.net/20180329134059217?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>点一下后问题解决，果然是编码的问题，如果怕麻烦的话，可以在transformer中设置不压缩：</p><p><img src="https://img-blog.csdn.net/20180329134143634?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br></p><p></p><div>单机None后同样问题解决。</div><p><br></p><p><strong>此外：</strong></p><p><strong>如果左侧框中出现了很多host名为 tunnel to：</strong></p><p>在左上角 Rules选项中 选中hide connects可以解决<br></p><p><img src="https://img-blog.csdn.net/20180329134335213?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong>如果https网页抓不到，是因为在一般设置下只能抓http：</strong><br></p><p>需要在Tools的Options选项中更改HTTPS的tag：</p><p></p><div></div><br><p><img src="https://img-blog.csdn.net/20180329134626978?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br></p><p></p><p>更改为：</p><p><img src="https://img-blog.csdn.net/20180329134646913?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br></p>所有警告均无视即可，无视之后火狐浏览器网页不能打开，但谷歌浏览器没问题，其他的没试过<br>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fiddler </tag>
            
            <tag> 抓包 </tag>
            
            <tag> 乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装python3.6.2</title>
      <link href="/2018/03/26/2018-03-26-centos7-an-zhuang-python3.6.2/"/>
      <url>/2018/03/26/2018-03-26-centos7-an-zhuang-python3.6.2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>本文参考：</strong></p><p><strong>https://blog.csdn.net/weixin_39728177/article/details/77368394</strong></p><p><strong>https://blog.csdn.net/blueheart20/article/details/70062671</strong></p><h2><strong>注意：以下代码中//后为注释内容！<br></strong></h2><h3><strong>1、环境介绍<br></strong></h3><p>   Centos 7,   当前的Python版本2.7.12</p><p>  &gt;&gt; cat /etc/os-release<br></p><p>命令可以查看系统的版本信息：</p><p>cat /etc/os-release <br>NAME="CentOS Linux"<br>VERSION="7 (Core)"<br>ID="centos"<br>ID_LIKE="rhel fedora"<br>VERSION_ID="7"<br>PRETTY_NAME="CentOS Linux 7 (Core)"<br>ANSI_COLOR="0;31"<br>CPE_NAME="cpe:/o:centos:centos:7"<br>HOME_URL="https://www.centos.org/"<br>BUG_REPORT_URL="https://bugs.centos.org/"<br><br>CENTOS_MANTISBT_PROJECT="CentOS-7"<br>CENTOS_MANTISBT_PROJECT_VERSION="7"<br></p><p>REDHAT_SUPPORT_PRODUCT="centos"</p><p></p><h2>2、下载Python3.6.2安装包</h2><p><span style="font-size:14px;"><span style="font-size:14px;"><span style="font-size:14px;">&gt;&gt;cd /usr/local/src   //放在src目录下<br></span></span></span></p><p></p><p align="left"><span style="font-size:14px;">&gt;&gt;wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz</span></p><p align="left"><span style="font-size:14px;"></span></p><h2>3、安装python3.6.2可能使用的依赖</h2><p align="left"><span style="font-size:14px;"><span style="font-size:14px;">&gt;&gt;</span> yum install openssl-devel bzip2-devel expat-devel gdbm-develreadline-devel sqlite-devel</span></p><h2>4、解压Python-3.6.2.tar.xz</h2><p><font size="3">在<span style="font-size:14px;"><span style="font-size:14px;"><span style="font-size:14px;">/usr/local/src</span></span></span>/目录下，先解压xz文件，再解压tar文件。</font></p><p align="left"><span style="font-size:14px;"><span style="font-size:14px;">&gt;&gt;</span> xz -d Python-3.6.2.tar.xz</span></p><p><span style="font-size:14px;"></span></p><p align="left"><span style="font-size:14px;"><span style="font-size:14px;">&gt;&gt;</span> tar xvf Python-3.6.2.tar</span></p><p><span style="font-size:14px;"></span></p><p align="left"><font size="3"><font size="3"><font size="3"><span style="font-size:14px;"><span style="font-size:14px;"><span style="font-size:14px;">&gt;&gt;</span></span></span></font></font>cd ..    // <span style="font-size:14px;"><span style="font-size:14px;">切换到/usr/local/</span></span></font></p><p align="left"><font size="3"><font size="3"><font size="3"><font size="3"><font size="3"><font size="3"><font size="3"><span style="font-size:14px;"><span style="font-size:14px;"><span style="font-size:14px;">&gt;&gt;</span></span></span></font></font></font></font>mkdir Python3<br></font></font></font></p><p><span style="font-size:14px;"></span></p><p align="left"><font size="3"><span style="font-size:14px;"><span style="font-size:14px;"><span style="font-size:14px;">&gt;&gt;</span></span></span>cd /usr/local/Python3 //用来存放编译后的python3</font></p><p></p><p align="left"><span style="font-size:14px;"></span></p><p align="left"><font size="3"><span style="font-size:14px;">&gt;&gt;</span>cd <font size="3"><font size="3"><span style="font-size:14px;"><span style="font-size:14px;"><span style="font-size:14px;">/usr/local/src</span></span></span>/</font></font>Python-3.6.2</font></p><p><span style="font-size:14px;"></span></p><p align="left"><span style="font-size:14px;"><span style="font-size:14px;">&gt;&gt;</span> ./configure --prefix=/usr/local --enable-optimizations</span></p><p align="left"><span style="font-size:14px;">其中：<span style="font-size:14px;"><span style="font-size:14px;">--enable-optimizations</span></span>是python的优化命令，可以提升10%到20%的效率，但安装过程会变慢<br></span></p><p></p><p align="left"><span style="font-size:14px;"></span></p><p align="left"><font size="3"><span style="font-size:14px;"><span style="font-size:14px;"><span style="font-size:14px;">&gt;&gt;</span></span></span> make</font></p><p><span style="font-size:14px;"></span></p><p align="left"><font size="3"><span style="font-size:14px;"><span style="font-size:14px;"><span style="font-size:14px;">&gt;&gt;</span></span></span> make install</font></p><p align="left"><span style="font-size:14px;"></span></p><h2>5、更改/usr/bin/python链接</h2><p align="left"><font size="3"><font size="3"><font size="3"><span style="font-size:14px;"><span style="font-size:14px;"><span style="font-size:14px;">&gt;&gt;</span></span></span></font></font> cd /usr/bin</font></p><p align="left"><font size="3"><font size="3"><font size="3"><span style="font-size:14px;"><span style="font-size:14px;"><span style="font-size:14px;">&gt;&gt;</span></span></span></font></font> mv python python.backup    \\备份python，在linux系统中后缀没有意义，所以<span style="font-size:14px;"><span style="font-size:14px;"><span style="font-size:14px;">python.backup</span></span></span>只是换了个名字</font></p><p align="left"><font size="3"><font size="3"><font size="3"><span style="font-size:14px;"><span style="font-size:14px;"><span style="font-size:14px;">&gt;&gt;</span></span></span></font></font> ln -s /usr/local/Python3/bin/python3.6 /usr/bin/python   \\这里是python3.6，不是python3.6.2\\-s创建软链接</font></p><p align="left"><span style="font-size:14px;"><br></span></p><br><p><span style="font-size:14px;"></span></p><p align="left"><span style="font-size:14px;"></span></p><h2>6、更改yum脚本的python依赖</h2>因为yum依赖python2，python3中没有yum<p align="left"><font size="3"><font size="3"><font size="3"><span style="font-size:14px;"><span style="font-size:14px;"><span style="font-size:14px;">&gt;&gt;</span></span></span></font></font> cd /usr/bin</font></p><p align="left"><font size="3"><font size="3"><font size="3"><span style="font-size:14px;"><span style="font-size:14px;"><span style="font-size:14px;">&gt;&gt;</span></span></span></font></font> ls yum*</font></p><p align="left"><span style="font-size:14px;">yum   yum-config-manager   yum-debug-restore   yum-groups-manager</span></p><p align="left"><span style="font-size:14px;">yum-builddep   yum-debug-dump   yumdownloader</span></p><p><span style="font-size:14px;">使用vim更改以上文件</span></p><p><span style="font-size:14px;">#如： vim yum</span></p><p><span style="font-size:14px;">以上7个文件全部</span></p><p align="left"><span style="font-size:14px;">将# !/usr/bin/python  改为  # !/usr/bin/python2</span></p><p align="left"><span style="font-size:14px;">更改完毕后，依次按ESC Ctrl+: wq Enter</span></p><h2>7、修改gnome-tweak-tool配置文件</h2><p align="left"><span style="font-size:14px;"># vim /usr/bin/gnome-tweak-tool</span></p><p align="left"><span style="font-size:14px;"># !/usr/bin/python  改为  # !/usr/bin/python2</span></p><h2>8、修改urlgrabber配置文件</h2><p align="left"><span style="font-size:14px;"># vim /usr/libexec/urlgrabber-ext-down</span></p><p align="left"><span style="font-size:14px;"># !/usr/bin/python  改为  # !/usr/bin/python2</span></p><br><p></p><p align="left"><span style="font-size:14px;"><br></span></p><p><br></p><br><p><br></p><p></p><br><br><p></p><p><strong></strong><br></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> centos7 </tag>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在python3.6环境下使用cxfreeze打包程序</title>
      <link href="/2018/03/22/2018-03-22-zai-python3.6-huan-jing-xia-shi-yong-cxfreeze-da-bao-cheng-xu/"/>
      <url>/2018/03/22/2018-03-22-zai-python3.6-huan-jing-xia-shi-yong-cxfreeze-da-bao-cheng-xu/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>环境：python3.6</strong></p><p><strong>打包程序：aliens_invasion</strong></p><p>    原本想使用pyintaller 进行打包，使用pip的安装过程也没有问题，打包过程也没有显示任何错误</p><p><img src="//img-blog.csdn.net/20180322091805176?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br></p><p>但最终生成的exe文件以及资源文件齐全的情况下，仍然无法运行：</p><p><img src="//img-blog.csdn.net/20180322091920524?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><img src="//img-blog.csdn.net/20180322091956580?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>后面通过visual studio的调试，发现是font的问题，于是我百度了有关说法，也有大佬说跟font没关系，是资源的相对路径有问题......终于到最后失去了耐心的我换了cxfreeze模块进行打包。</p><p><br></p><h4><strong>cx_Freeze模块的安装：</strong></h4><p>我所使用的是win10系统，首先在开始菜单里找到命令提示符</p><p><img src="//img-blog.csdn.net/20180322092340590?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>win10系统比较方便，直接在地下的搜索栏输入cmd即可，打开命令提示符后使用pip命令进行安装，</p><p><strong>注意：python3自带了pip模块，而python2需要手动安装pip，具体不详细解释</strong></p><p>cxfreeze命令对应的模块是cx_Freeze,我们在命令行敲入pip install cx_Freeze<strong><br></strong></p><p><img src="//img-blog.csdn.net/20180322093027683?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br></p><p>安装完毕后有可能会提示cxfreeze不是内部或外部命令，这个我们可以通过编写一个bat文件解决</p><p><strong>注：该方法来自知乎大佬：</strong></p><p><strong><a href="https://www.zhihu.com/question/41211581" target="_blank" rel="noopener">https://www.zhihu.com/question/41211581</a><br></strong></p><p><strong>以下是原文：</strong></p><p><strong></strong></p><div><div>在cxfreeze的安装目录下即\Python34\Scripts，添加一个文件cxfreeze.bat(可用记事本)<br>cxfreeze.bat内容如下：<br>  @ echo off<br>C:\Python34\python.exe C:\Python34\Scripts\cxfreeze %*<br>即可解决上述问题，在该目录下输入czfreeze -h也可以查看安装情况（用pip install cxfreeze就可直接安装改第三方库）</div><br>我的是python 3.6环境，首先找到相应的python模块的路径<br><img src="//img-blog.csdn.net/20180322093426768?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br></div><p><strong></strong></p><p>在<img src="//img-blog.csdn.net/2018032209355157?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p><strong></strong></p><p>中建立一个<strong>cxfreeze</strong>.txt文件，然后在文件中写入：</p><p><strong></strong></p><p>@ echo off<strong><br></strong></p><p>你的python路径\python.exe 你的python路径\Scripts\cxfreeze %*</p><p>然后将文件的后缀改为bat即可，有些系统没有显示后缀的可以自行去百度上查找显示后缀的方法，</p><p>一般是在文件的查看选项中去掉隐藏属性的选项<strong><br></strong></p><p><strong>例：</strong></p><h4><span style="font-size:14px;">我的python路径是E:\extrasoftware\python3</span></h4>所以我写入了<br><p><strong></strong></p><p></p><p><strong>@ echo off<strong><br></strong></strong></p><p>E:\extrasoftware\python3\python.exe E:\extrasoftware\python3\Scripts\cxfreeze %*</p><p>之后果然正常了</p><p>可以使用cxfreeze -h 命令查看帮助信息：</p><p><img src="//img-blog.csdn.net/20180322094001623?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br></p><p><strong></strong></p><h4><strong>cxfreeze命令的使用：</strong></h4><span style="font-size:14px;">首先在命令提示符中使用cd命令转换到所需要转换的python文件的目录中，因为转换后的dist文件夹会出现在命令提示符的当前目录中</span><strong></strong><p><br></p><p><strong><img src="//img-blog.csdn.net/20180322094218945?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br></strong></p><p>我们需要根据</p><p><strong><img src="//img-blog.csdn.net/20180322094306350?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br></strong></p><p>来设置需要转换的文件的路径<strong>：（<strong>--init-script=</strong>后接绝对路径）</strong></p><p><strong>这里输入：</strong></p><p><strong>cxfreeze --init-script=C:\Users\tangc\Desktop\alien_invasion\alien_invasion.py alien_invasion.py<br></strong></p><p>然后回车</p><p><img src="//img-blog.csdn.net/20180322094654725?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br></p><p>一大串信息后成功，在文件夹中也出现了dist目录：</p><p><img src="//img-blog.csdn.net/20180322094731934?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>注意：如果你的程序中有图片等资源，是需要根据程序中的相对路径加入到dist文件中的</p><p>我打包的是<img src="//img-blog.csdn.net/20180322094844339?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>这个主程序，而我的图片文件夹在它的同一目录下，所以在dist文件夹中：</p><p><img src="//img-blog.csdn.net/20180322094940866?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br></p><p>也要在.exe同目录中加入images的文件夹（图片资源）</p><p><img src="//img-blog.csdn.net/20180322095030235?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p><p>双击.exe文件，运行成功！</p><p><img src="//img-blog.csdn.net/20180322095100161?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L3RhbmdnNTU1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt><br></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> cxfree </tag>
            
            <tag> pyinstaller </tag>
            
            <tag> 打包 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
